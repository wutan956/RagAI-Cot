{
  "version": 3,
  "sources": ["../../katex/dist/contrib/auto-render.mjs"],
  "sourcesContent": ["import katex from '../katex.mjs';\n\n/* eslint no-constant-condition:0 */\nvar findEndOfMath = function findEndOfMath(delimiter, text, startIndex) {\n  // Adapted from\n  // https://github.com/Khan/perseus/blob/master/src/perseus-markdown.jsx\n  var index = startIndex;\n  var braceLevel = 0;\n  var delimLength = delimiter.length;\n\n  while (index < text.length) {\n    var character = text[index];\n\n    if (braceLevel <= 0 && text.slice(index, index + delimLength) === delimiter) {\n      return index;\n    } else if (character === \"\\\\\") {\n      index++;\n    } else if (character === \"{\") {\n      braceLevel++;\n    } else if (character === \"}\") {\n      braceLevel--;\n    }\n\n    index++;\n  }\n\n  return -1;\n};\n\nvar escapeRegex = function escapeRegex(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n};\n\nvar amsRegex = /^\\\\begin{/;\n\nvar splitAtDelimiters = function splitAtDelimiters(text, delimiters) {\n  var index;\n  var data = [];\n  var regexLeft = new RegExp(\"(\" + delimiters.map(x => escapeRegex(x.left)).join(\"|\") + \")\");\n\n  while (true) {\n    index = text.search(regexLeft);\n\n    if (index === -1) {\n      break;\n    }\n\n    if (index > 0) {\n      data.push({\n        type: \"text\",\n        data: text.slice(0, index)\n      });\n      text = text.slice(index); // now text starts with delimiter\n    } // ... so this always succeeds:\n\n\n    var i = delimiters.findIndex(delim => text.startsWith(delim.left));\n    index = findEndOfMath(delimiters[i].right, text, delimiters[i].left.length);\n\n    if (index === -1) {\n      break;\n    }\n\n    var rawData = text.slice(0, index + delimiters[i].right.length);\n    var math = amsRegex.test(rawData) ? rawData : text.slice(delimiters[i].left.length, index);\n    data.push({\n      type: \"math\",\n      data: math,\n      rawData,\n      display: delimiters[i].display\n    });\n    text = text.slice(index + delimiters[i].right.length);\n  }\n\n  if (text !== \"\") {\n    data.push({\n      type: \"text\",\n      data: text\n    });\n  }\n\n  return data;\n};\n\n/* eslint no-console:0 */\n/* Note: optionsCopy is mutated by this method. If it is ever exposed in the\n * API, we should copy it before mutating.\n */\n\nvar renderMathInText = function renderMathInText(text, optionsCopy) {\n  var data = splitAtDelimiters(text, optionsCopy.delimiters);\n\n  if (data.length === 1 && data[0].type === 'text') {\n    // There is no formula in the text.\n    // Let's return null which means there is no need to replace\n    // the current text node with a new one.\n    return null;\n  }\n\n  var fragment = document.createDocumentFragment();\n\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].type === \"text\") {\n      fragment.appendChild(document.createTextNode(data[i].data));\n    } else {\n      var span = document.createElement(\"span\");\n      var math = data[i].data; // Override any display mode defined in the settings with that\n      // defined by the text itself\n\n      optionsCopy.displayMode = data[i].display;\n\n      try {\n        if (optionsCopy.preProcess) {\n          math = optionsCopy.preProcess(math);\n        }\n\n        katex.render(math, span, optionsCopy);\n      } catch (e) {\n        if (!(e instanceof katex.ParseError)) {\n          throw e;\n        }\n\n        optionsCopy.errorCallback(\"KaTeX auto-render: Failed to parse `\" + data[i].data + \"` with \", e);\n        fragment.appendChild(document.createTextNode(data[i].rawData));\n        continue;\n      }\n\n      fragment.appendChild(span);\n    }\n  }\n\n  return fragment;\n};\n\nvar renderElem = function renderElem(elem, optionsCopy) {\n  for (var i = 0; i < elem.childNodes.length; i++) {\n    var childNode = elem.childNodes[i];\n\n    if (childNode.nodeType === 3) {\n      // Text node\n      // Concatenate all sibling text nodes.\n      // Webkit browsers split very large text nodes into smaller ones,\n      // so the delimiters may be split across different nodes.\n      var textContentConcat = childNode.textContent;\n      var sibling = childNode.nextSibling;\n      var nSiblings = 0;\n\n      while (sibling && sibling.nodeType === Node.TEXT_NODE) {\n        textContentConcat += sibling.textContent;\n        sibling = sibling.nextSibling;\n        nSiblings++;\n      }\n\n      var frag = renderMathInText(textContentConcat, optionsCopy);\n\n      if (frag) {\n        // Remove extra text nodes\n        for (var j = 0; j < nSiblings; j++) {\n          childNode.nextSibling.remove();\n        }\n\n        i += frag.childNodes.length - 1;\n        elem.replaceChild(frag, childNode);\n      } else {\n        // If the concatenated text does not contain math\n        // the siblings will not either\n        i += nSiblings;\n      }\n    } else if (childNode.nodeType === 1) {\n      (function () {\n        // Element node\n        var className = ' ' + childNode.className + ' ';\n        var shouldRender = optionsCopy.ignoredTags.indexOf(childNode.nodeName.toLowerCase()) === -1 && optionsCopy.ignoredClasses.every(x => className.indexOf(' ' + x + ' ') === -1);\n\n        if (shouldRender) {\n          renderElem(childNode, optionsCopy);\n        }\n      })();\n    } // Otherwise, it's something else, and ignore it.\n\n  }\n};\n\nvar renderMathInElement = function renderMathInElement(elem, options) {\n  if (!elem) {\n    throw new Error(\"No element provided to render\");\n  }\n\n  var optionsCopy = {}; // Object.assign(optionsCopy, option)\n\n  for (var option in options) {\n    if (options.hasOwnProperty(option)) {\n      optionsCopy[option] = options[option];\n    }\n  } // default options\n\n\n  optionsCopy.delimiters = optionsCopy.delimiters || [{\n    left: \"$$\",\n    right: \"$$\",\n    display: true\n  }, {\n    left: \"\\\\(\",\n    right: \"\\\\)\",\n    display: false\n  }, // LaTeX uses $…$, but it ruins the display of normal `$` in text:\n  // {left: \"$\", right: \"$\", display: false},\n  // $ must come after $$\n  // Render AMS environments even if outside $$…$$ delimiters.\n  {\n    left: \"\\\\begin{equation}\",\n    right: \"\\\\end{equation}\",\n    display: true\n  }, {\n    left: \"\\\\begin{align}\",\n    right: \"\\\\end{align}\",\n    display: true\n  }, {\n    left: \"\\\\begin{alignat}\",\n    right: \"\\\\end{alignat}\",\n    display: true\n  }, {\n    left: \"\\\\begin{gather}\",\n    right: \"\\\\end{gather}\",\n    display: true\n  }, {\n    left: \"\\\\begin{CD}\",\n    right: \"\\\\end{CD}\",\n    display: true\n  }, {\n    left: \"\\\\[\",\n    right: \"\\\\]\",\n    display: true\n  }];\n  optionsCopy.ignoredTags = optionsCopy.ignoredTags || [\"script\", \"noscript\", \"style\", \"textarea\", \"pre\", \"code\", \"option\"];\n  optionsCopy.ignoredClasses = optionsCopy.ignoredClasses || [];\n  optionsCopy.errorCallback = optionsCopy.errorCallback || console.error; // Enable sharing of global macros defined via `\\gdef` between different\n  // math elements within a single call to `renderMathInElement`.\n\n  optionsCopy.macros = optionsCopy.macros || {};\n  renderElem(elem, optionsCopy);\n};\n\nexport { renderMathInElement as default };\n"],
  "mappings": "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",
  "names": ["findEndOfMath", "escapeRegex", "splitAtDelimiters", "renderMathInText", "renderElem", "renderMathInElement"]
}
